///////////////////////////////////////////////////////////
//  CMovieObject.as
//  Macromedia ActionScript Implementation of the Class CMovieObject
//  Generated by Enterprise Architect
//  Created on:      15-二月-2012 10:17:54
//  Original author: johnnyeven
///////////////////////////////////////////////////////////

package Apollo.Objects
{
	import Apollo.Controller.CBaseController;
	import Apollo.Objects.CGameObject;
	import Apollo.Configuration.*;
	import flash.geom.Rectangle;

	/**
	 * @author johnnyeven
	 * @version 1.0
	 * @created 15-二月-2012 10:17:54
	 */

	public class CMovieObject extends CGameObject implements IFrameRender
	{
		/**
		 * 当前帧数
		 */
		protected var _currentFrame: uint;
		/**
		 * 上一帧
		 */
		protected var _prevFrame: uint;
		/**
		 * 帧总数
		 */
		protected var _totalFrame: uint;
		/**
		 * 是否循环播放
		 */
		protected var isLoopPlay: Boolean = false;
		/**
		 * 非循环动画是否播放完毕
		 */
		protected var isPlayEnd: Boolean = false;
		
		protected var _lastFrameTime: uint;
		
		protected var _playTime: uint;
		
		protected var _needChangeFrame: Boolean;

		/**
		 * 
		 * @param _ctrl
		 */
		public function CMovieObject(_ctrl:CBaseController = null, _direction: uint = CDirection.DOWN)
		{
			_lastFrameTime = GlobalContextConfig.Timer;
			_currentFrame = 0;
			_prevFrame = 0;
			_totalFrame = 0;
			_needChangeFrame = false;
			super(_ctrl, _direction);
		}
		
		public function set currentFrame(value: uint): void
		{
			_currentFrame = value;
		}
		
		public function get currentFrame(): uint
		{
			return _currentFrame;
		}
		
		public function get prevFrame(): uint
		{
			return _prevFrame;
		}
		
		public function set loop(_loop: Boolean): void
		{
			isLoopPlay = _loop;
			isPlayEnd = false;
		}
		
		public function get isKeepStatic(): Boolean
		{
			return !isLoopPlay && isPlayEnd;
		}
		
		override public function get renderRect(): Rectangle
		{
			_rect.x = _currentFrame * _graphic.frameWidth;
			_rect.y = _direction * _graphic.frameHeight;
			_rect.width = _graphic.frameWidth;
			_rect.height = _graphic.frameHeight;
			return _rect;
		}
		
		override public function get renderLine(): uint
		{
			return _direction;
		}
		
		override public function get renderFrame(): uint
		{
			return _currentFrame;
		}
		
		override protected function rebuild(): void
		{
			super.rebuild();
			updateFPS();
		}
		
		protected function updateFPS(): void
		{
			_totalFrame = _graphic.frameTotal;
			_playTime = _graphic.fps == 0 ? 0 : (1000 / _graphic.fps);
		}

		protected function enterFrame(): Boolean
		{
			if (_graphic == null || _graphic.fps == 0)
			{
				return false;
			}
			else
			{
				if (GlobalContextConfig.Timer - _lastFrameTime > _playTime && !isPlayEnd)
				{
					_lastFrameTime = GlobalContextConfig.Timer;
					_prevFrame = _currentFrame;
					
					if (_currentFrame >= _totalFrame - 1)
					{
						isLoopPlay ? _currentFrame = 0 : isPlayEnd = true;
					}
					else
					{
						_currentFrame++;
					}
					_needChangeFrame = true;
				}
				return true;
			}
		}
		
		override public function RenderObject(): void
		{
			enterFrame();
			super.RenderObject();
		}
		
		public function get needChangeFrame(): Boolean
		{
			return _needChangeFrame;
		}
		
		public function set needChangeFrame(value: Boolean): void
		{
			_needChangeFrame = value;
		}

	} //end CMovieObject

}