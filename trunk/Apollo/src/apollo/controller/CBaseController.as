///////////////////////////////////////////////////////////
//  CBaseController.as
//  Macromedia ActionScript Implementation of the Class CBaseController
//  Generated by Enterprise Architect
//  Created on:      15-二月-2012 10:17:53
//  Original author: Administrator
///////////////////////////////////////////////////////////

package apollo.controller
{
	import flash.geom.Point;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	import flash.events.Event;
	
	import apollo.objects.CGameObject;
	import apollo.objects.CDirection;
	import apollo.controller.skill.CSkill;

	/**
	 * @author Administrator
	 * @version 1.0
	 * @created 15-二月-2012 10:17:53
	 */

	public class CBaseController implements IEventDispatcher
	{
		protected var _perception: CPerception;
		protected var _controlObject: CGameObject;
		protected var _endPoint: Point;
		protected var _nextPoint: Point;
		protected var eventDispatcher: EventDispatcher;
		
		protected var _skillController: CSkill;

		public function CBaseController(per: CPerception)
		{
			_perception = per;
			eventDispatcher = new EventDispatcher(this);
		}
		
		public function clear(): void
		{
		}

		public function setupListener(): void
		{
		}

		public function removeListener(): void
		{
		}

		public function calcAction(): void
		{
		}

		/**
		 * 
		 * @param _angle
		 */
		protected function changeDirectionByAngle(_angle:int): void
		{
			var direction: uint;
			if (_angle < -22.5)
			{
				_angle += 360;
			}
			if (_angle >= -22.5 && _angle < 22.5)
			{
				direction = CDirection.TOP;
			}
			else if (_angle >= 22.5 && _angle < 67.5)
			{
				direction = CDirection.RIGHT_TOP;
			}
			else if (_angle >= 67.5 && _angle < 112.5)
			{
				direction = CDirection.RIGHT;
			}
			else if (_angle >= 112.5 && _angle < 157.5)
			{
				direction = CDirection.RIGHT_DOWN;
			}
			else if (_angle >= 157.5 && _angle < 202.5)
			{
				direction = CDirection.DOWN;
			}
			else if (_angle >= 202.5 && _angle < 247.5)
			{
				direction = CDirection.LEFT_DOWN;
			}
			else if (_angle >= 247.5 && _angle < 292.5)
			{
				direction = CDirection.LEFT;
			}
			else
			{
				direction = CDirection.LEFT_TOP;
			}
			if (direction != _controlObject.direction)
			{
				_controlObject.direction = direction;
			}
		}
		
		public function changeDirectionByPoint(x: Number, y: Number): void
		{
			changeDirectionByAngle(CDirection.radiansToDegress(CDirection.getRadians(x - _controlObject.pos.x, y - _controlObject.pos.y)) + 90);
		}
		
		public function get perception(): CPerception
		{
			return _perception;
		}
		
		public function set perception(value: CPerception): void
		{
			_perception = value;
		}

		public function get endPoint(): Point
		{
			return _endPoint;
		}

		public function get nextPoint(): Point
		{
			return _nextPoint;
		}

		/**
		 * 
		 * @param _point
		 */
		public function set endPoint(_point:Point): void
		{
			_endPoint = _point;
		}

		/**
		 * 
		 * @param o
		 */
		public function set controlObject(o:CGameObject): void
		{
			_controlObject = o;
		}
		
		public function get controlObject(): CGameObject
		{
			return _controlObject;
		}
		
		public function get skillController(): CSkill
		{
			return _skillController;
		}
		
		/**
		 * 
		 * @param type
		 * @param listener
		 * @param useCapture
		 * @param priority
		 * @param useWeakReference
		 */
		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false): void
		{
			eventDispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
		}

		/**
		 * 
		 * @param e
		 */
		public function dispatchEvent(e:Event): Boolean
		{
			return eventDispatcher.dispatchEvent(e);
		}

		/**
		 * 
		 * @param type
		 */
		public function hasEventListener(type:String): Boolean
		{
			return eventDispatcher.hasEventListener(type);
		}

		/**
		 * 
		 * @param type
		 * @param listener
		 * @param useCapture
		 */
		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false): void
		{
			eventDispatcher.removeEventListener(type, listener, useCapture);
		}

		/**
		 * 
		 * @param type
		 */
		public function willTrigger(type:String): Boolean
		{
			return eventDispatcher.willTrigger(type);
		}

	} //end CBaseController

}