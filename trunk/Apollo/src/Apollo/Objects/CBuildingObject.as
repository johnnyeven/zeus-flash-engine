///////////////////////////////////////////////////////////
//  CBuildingObject.as
//  Macromedia ActionScript Implementation of the Class CBuildingObject
//  Generated by Enterprise Architect
//  Created on:      15-二月-2012 10:17:54
//  Original author: johnnyeven
///////////////////////////////////////////////////////////

package Apollo.Objects
{
	import Apollo.Objects.CMovieObject;
	import Apollo.Controller.CBaseController;
	import Apollo.Network.Data.CResourceParameter;
	import Apollo.Objects.dependency.CDependency;
	import Apollo.Center.CResourceCenter;
	import Apollo.Display.TextFieldEx;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.DisplayObject;
	import flash.events.Event;

	/**
	 * @author johnnyeven
	 * @version 1.0
	 * @created 15-二月-2012 10:17:54
	 */

	public class CBuildingObject extends CMovieObject
	{
		protected var _buildingId: uint;
		protected var _buildingName: String;
		protected var _level: uint;
		protected var _maxLevel: uint;
		protected var _nameDisplayBuffer: Bitmap;
		protected var _additionalDisplay: Array;
		/**
		 * 消耗的资源
		 */
		protected var _consumeList: Vector.<CResourceParameter>;
		/**
		 * 产出的资源
		 */
		protected var _produceList: Vector.<CResourceParameter>;
		protected var _dependency: CDependency;

		/**
		 * 
		 * @param _ctrl
		 */
		public function CBuildingObject(_ctrl:CBaseController, _buildingId: uint)
		{
			super(_ctrl);
			this._buildingId = _buildingId;
			_consumeList = new Vector.<CResourceParameter>();
			_produceList = new Vector.<CResourceParameter>();
		}
		
		public function get consumeList(): Vector.<CResourceParameter>
		{
			return _consumeList;
		}
		
		public function get produceList(): Vector.<CResourceParameter>
		{
			return _produceList;
		}
		
		public function addConsumeResource(resource: CResourceParameter): void
		{
			if (resource != null)
			{
				if (resource.resourceModified > 0)
				{
					resource.resourceModified *= -1;
					CONFIG::DebugMode
					{
						trace("Warning: ConsumeResource的resourceModified大于零，已自动更正");
					}
				}
				_consumeList.push(resource);
				trace("modify consume Resource: " + resource.resourceId);
				CResourceCenter.getInstance().modifyResource(resource.resourceId, resource.resourceModified);
			}
		}
		
		public function addProduceResource(resource: CResourceParameter): void
		{
			if (resource != null)
			{
				if (resource.resourceModified < 0)
				{
					resource.resourceModified *= -1;
					CONFIG::DebugMode
					{
						trace("Warning: ProduceResource的resourceModified小于零，已自动更正");
					}
				}
				_produceList.push(resource);
				trace("modify produce Resource: " + resource.resourceId);
				CResourceCenter.getInstance().modifyResource(resource.resourceId, resource.resourceModified);
			}
		}

		/**
		 * 
		 * @param level
		 */
		public function levelUp(value: uint = 1): Boolean
		{
			if (_level >= _maxLevel)
			{
				return false;
			}
			else
			{
				Upgrade();
				_level += value;
				return true;
			}
		}

		public function get level(): uint
		{
			return _level;
		}
		
		public function get buildingId(): uint
		{
			return _buildingId;
		}
		
		public function get buildingName(): String
		{
			return _buildingName;
		}

		public function get dependency(): CDependency
		{
			return _dependency;
		}

		public override function Upgrade(): void
		{
			super.Upgrade();
		}
		
		public function setDisplayName(_name: String, _color:Number, _borderColor:Number): void
		{
			if (_name == "" || _name == null)
			{
				return;
			}
			_buildingName = _name;
			
			var nameText: TextFieldEx = new TextFieldEx('', 0xFFFFFF);
			nameText.text = pos.x + "|||" + pos.y;
			nameText.autoIncrease();
			nameText.textColor = _color;
			nameText.fontBorder = _borderColor;
			nameText.align = TextFieldEx.CENTER;
			
			if (_nameDisplayBuffer != null)
			{
				_nameDisplayBuffer.bitmapData.dispose();
			}
			else
			{
				_nameDisplayBuffer = new Bitmap();
			}
			
			var _nameBitmapData: BitmapData = new BitmapData(nameText.width, nameText.height, true, 0x00000000);
			_nameBitmapData.draw(nameText);
			
			_nameDisplayBuffer.bitmapData = _nameBitmapData;
			autoFixNamePos();
			addAdditionalDisplay(_nameDisplayBuffer);
			
			nameText = null;
		}
		
		protected function autoFixNamePos(): void
		{
			_nameDisplayBuffer.x = -int(_nameDisplayBuffer.width / 2);
			_nameDisplayBuffer.y = -int(_graphic.frameHeight);
		}
		
		public function addAdditionalDisplay(o: DisplayObject): void
		{
			if (_additionalDisplay == null)
			{
				_additionalDisplay = new Array();
			}
			else
			{
				if (_additionalDisplay.indexOf(o) != -1)
				{
					return;
				}
			}
			_additionalDisplay.push(o);
			addChild(o);
		}
		
		public function removeAdditionalDisplay(o: DisplayObject): void
		{
			if (o == null)
			{
				for each (var i: int in _additionalDisplay)
				{
					if (_additionalDisplay[i] == o)
					{
						_additionalDisplay[i].clear();
						_additionalDisplay.splice(i, 1);
						removeChild(_additionalDisplay[i]);
						break;
					}
				}
			}
		}
		
		public function removeAdditionalDisplayById(id: int = -1): void
		{
			if (id == -1)
			{
				while (_additionalDisplay.length)
				{
					_additionalDisplay[0].clear();
					_additionalDisplay.splice(0, 1);
					removeChild(_additionalDisplay[0]);
				}
			}
			else
			{
				if (id > _additionalDisplay.length || _additionalDisplay[id] == null)
				{
					return;
				}
				else
				{
					_additionalDisplay[id].clear();
					_additionalDisplay.splice(id, 1);
					removeChild(_additionalDisplay[id]);
				}
			}
		}
		
		public function get additionalDisplay(): Array
		{
			return _additionalDisplay;
		}
	} //end CBuildingObject

}